# Automatically generated using ../scripts/build_datasets_info.py. 

from datasets import ClassLabel, Value, Sequence

valid_task_names=['cola', 'sst2', 'mrpc', 'qqp', 'stsb', 'mnli', 'mnli_mismatched', 'mnli_matched', 'qnli', 'rte', 'wnli', 'ax', 'imdb', 'hans']

datasets_info = {

	"cola": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'cola'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [8551, 1043, 1063],
		"sentence_keys": ['sentence'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'cola'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'sentence': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['unacceptable', 'acceptable'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"sst2": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'sst2'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [67349, 872, 1821],
		"sentence_keys": ['sentence'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'sst2'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'sentence': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['negative', 'positive'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"mrpc": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'mrpc'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [3668, 408, 1725],
		"sentence_keys": ['sentence1', 'sentence2'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'mrpc'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'sentence1': Value(dtype='string', id=None), 'sentence2': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['not_equivalent', 'equivalent'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"qqp": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'qqp'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [363846, 40430, 390965],
		"sentence_keys": ['question1', 'question2'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'qqp'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'question1': Value(dtype='string', id=None), 'question2': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['not_duplicate', 'duplicate'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"stsb": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'stsb'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [5749, 1500, 1379],
		"sentence_keys": ['sentence1', 'sentence2'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'stsb'),
		"num_outputs": 1,
		"task_type": "regression",
		"features": {'sentence1': Value(dtype='string', id=None), 'sentence2': Value(dtype='string', id=None), 'label': Value(dtype='float32', id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"mnli": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'mnli'},
		"splits": ['train', 'validation_matched', 'validation_mismatched', 'test_matched', 'test_mismatched'],
		"splits_num_examples": [392702, 9815, 9832, 9796, 9847],
		"sentence_keys": ['premise', 'hypothesis'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'mnli'),
		"num_outputs": 3,
		"task_type": "classification",
		"features": {'premise': Value(dtype='string', id=None), 'hypothesis': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=3, names=['entailment', 'neutral', 'contradiction'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"mnli_mismatched": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'mnli_mismatched'},
		"splits": ['validation', 'test'],
		"splits_num_examples": [9832, 9847],
		"sentence_keys": ['premise', 'hypothesis'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'mnli_mismatched'),
		"num_outputs": 3,
		"task_type": "classification",
		"features": {'premise': Value(dtype='string', id=None), 'hypothesis': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=3, names=['entailment', 'neutral', 'contradiction'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"mnli_matched": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'mnli_matched'},
		"splits": ['validation', 'test'],
		"splits_num_examples": [9815, 9796],
		"sentence_keys": ['premise', 'hypothesis'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'mnli_matched'),
		"num_outputs": 3,
		"task_type": "classification",
		"features": {'premise': Value(dtype='string', id=None), 'hypothesis': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=3, names=['entailment', 'neutral', 'contradiction'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"qnli": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'qnli'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [104743, 5463, 5463],
		"sentence_keys": ['question', 'sentence'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'qnli'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'question': Value(dtype='string', id=None), 'sentence': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['entailment', 'not_entailment'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"rte": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'rte'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [2490, 277, 3000],
		"sentence_keys": ['sentence1', 'sentence2'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'rte'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'sentence1': Value(dtype='string', id=None), 'sentence2': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['entailment', 'not_entailment'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"wnli": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'wnli'},
		"splits": ['train', 'validation', 'test'],
		"splits_num_examples": [635, 71, 146],
		"sentence_keys": ['sentence1', 'sentence2'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('glue', 'wnli'),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'sentence1': Value(dtype='string', id=None), 'sentence2': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['not_entailment', 'entailment'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"ax": {
		"load_dataset_kwargs": {'path': 'glue', 'name': 'ax'},
		"splits": ['test'],
		"splits_num_examples": [1104],
		"sentence_keys": ['premise', 'hypothesis'],
		"id_key": "idx",
		"label_key": "label",
		"evaluate_load_args": ('accuracy',),
		"num_outputs": 3,
		"task_type": "classification",
		"features": {'premise': Value(dtype='string', id=None), 'hypothesis': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=3, names=['entailment', 'neutral', 'contradiction'], id=None), 'idx': Value(dtype='int32', id=None)},
	},

	"imdb": {
		"load_dataset_kwargs": {'path': 'imdb', 'name': 'plain_text'},
		"splits": ['train', 'test', 'unsupervised'],
		"splits_num_examples": [25000, 25000, 50000],
		"sentence_keys": ['text'],
		"id_key": None,
		"label_key": "label",
		"evaluate_load_args": ('accuracy',),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'text': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['neg', 'pos'], id=None)},
	},

	"hans": {
		"load_dataset_kwargs": {'path': 'hans', 'name': 'plain_text'},
		"splits": ['train', 'validation'],
		"splits_num_examples": [30000, 30000],
		"sentence_keys": ['premise', 'hypothesis'],
		"id_key": None,
		"label_key": "label",
		"evaluate_load_args": ('accuracy',),
		"num_outputs": 2,
		"task_type": "classification",
		"features": {'premise': Value(dtype='string', id=None), 'hypothesis': Value(dtype='string', id=None), 'label': ClassLabel(num_classes=2, names=['entailment', 'non-entailment'], id=None), 'parse_premise': Value(dtype='string', id=None), 'parse_hypothesis': Value(dtype='string', id=None), 'binary_parse_premise': Value(dtype='string', id=None), 'binary_parse_hypothesis': Value(dtype='string', id=None), 'heuristic': Value(dtype='string', id=None), 'subcase': Value(dtype='string', id=None), 'template': Value(dtype='string', id=None)},
	},
}
